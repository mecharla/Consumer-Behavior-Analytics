USE customer_data;
SHOW TABLES;
SELECT * FROM customer_shopping_behavior LIMIT 5;
SHOW COLUMNS FROM customer_shopping_behavior;
DESCRIBE customer_shopping_behavior;
SELECT age_group, SUM(purchased_amount) AS total_revenue
FROM customer_shopping_behavior
GROUP BY age_group;
-- Q1. Total revenue generated by male vs. female customers
SELECT gender, SUM(purchased_amount) AS revenue
FROM customer_shopping_behavior
GROUP BY gender;


-- Q2. Customers who used a discount but spent more than the average purchase amount
SELECT customer_id, purchased_amount
FROM customer_shopping_behavior
WHERE discount_applied = 'Yes'
  AND purchased_amount >= (SELECT AVG(purchased_amount) FROM customer_shopping_behavior);


-- Q3. Top 5 products with the highest average review rating
SELECT item_purchased, ROUND(AVG(review_rating), 2) AS average_product_rating
FROM customer_shopping_behavior
GROUP BY item_purchased
ORDER BY AVG(review_rating) DESC
LIMIT 5;


-- Q4. Compare average purchase amounts between Standard and Express Shipping
SELECT shipping_type, ROUND(AVG(purchased_amount), 2) AS avg_purchase
FROM customer_shopping_behavior
WHERE shipping_type IN ('Standard', 'Express')
GROUP BY shipping_type;


-- Q5. Compare average spend and total revenue between subscribers and non-subscribers
SELECT subscription_status,
       COUNT(customer_id) AS total_customers,
       ROUND(AVG(purchased_amount), 2) AS avg_spend,
       ROUND(SUM(purchased_amount), 2) AS total_revenue
FROM customer_shopping_behavior
GROUP BY subscription_status
ORDER BY total_revenue DESC, avg_spend DESC;


-- Q6. Top 5 products with highest percentage of purchases with discounts applied
SELECT item_purchased,
       ROUND(100.0 * SUM(CASE WHEN discount_applied = 'Yes' THEN 1 ELSE 0 END) / COUNT(*), 2) AS discount_rate
FROM customer_shopping_behavior
GROUP BY item_purchased
ORDER BY discount_rate DESC
LIMIT 5;


-- Q7. Segment customers into New, Returning, and Loyal based on previous purchases
WITH customer_type AS (
    SELECT customer_id, previous_purchases,
           CASE 
               WHEN previous_purchases = 1 THEN 'New'
               WHEN previous_purchases BETWEEN 2 AND 10 THEN 'Returning'
               ELSE 'Loyal'
           END AS customer_segment
    FROM customer_shopping_behavior
)
SELECT customer_segment, COUNT(*) AS number_of_customers
FROM customer_type
GROUP BY customer_segment;


-- Q8. Top 3 most purchased products within each category
WITH item_counts AS (
    SELECT category,
           item_purchased,
           COUNT(customer_id) AS total_orders,
           ROW_NUMBER() OVER (PARTITION BY category ORDER BY COUNT(customer_id) DESC) AS item_rank
    FROM customer_shopping_behavior
    GROUP BY category, item_purchased
)
SELECT item_rank, category, item_purchased, total_orders
FROM item_counts
WHERE item_rank <= 3;


-- Q9. Repeat buyers (more than 5 previous purchases) subscription status
SELECT subscription_status,
       COUNT(customer_id) AS repeat_buyers
FROM customer_shopping_behavior
WHERE previous_purchases > 5
GROUP BY subscription_status;


-- Q10. Revenue contribution of each age group
SELECT age_group, SUM(purchased_amount) AS total_revenue
FROM customer_shopping_behavior
GROUP BY age_group
ORDER BY total_revenue DESC;
